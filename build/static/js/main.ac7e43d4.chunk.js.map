{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["monthsArr","Array","from","length","value","index","month","currentyear","Date","getFullYear","yearsArr","CForm","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvv","children","useState","cardNumber","setCardNumber","handleFormChange","event","target","name","className","type","autoComplete","onChange","console","log","replace","test","trimRight","maxLength","ref","onFocus","e","onBlur","disabled","map","val","key","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","style","setStyle","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","useEffect","element","current","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","alt","src","onClick","TransitionGroup","component","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","classNames","timeout","SwitchTransition","in-out","htmlFor","out-in","toString","substr","initialState","MainScreen","state","setState","setCurrentFocusedElm","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"wPAIMA,EAAYC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAOC,GACjD,IAAMC,EAAQD,EAAQ,EACtB,OAAOC,GAAS,EAAK,IAAMA,EAAUA,KAGnCC,GAAc,IAAIC,MAAOC,cAEzBC,EAAWT,MAAMC,KACnB,CAAEC,OAAQ,IAAK,SAACC,EAAOC,GAAR,OAAkBE,EAAcF,KAGpC,SAASM,EAAT,GAWX,IAVAC,EAUD,EAVCA,UACAC,EASD,EATCA,SACAC,EAQD,EARCA,cACAC,EAOD,EAPCA,cACAC,EAMD,EANCA,cACAC,EAKD,EALCA,YACAC,EAID,EAJCA,iBACAC,EAGD,EAHCA,gBACAC,EAED,EAFCA,QACAC,EACD,EADCA,SAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAmB,SAACC,GACtB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMxB,EAAd,EAAcA,MAEdU,EAAcc,EAAMxB,IAgDxB,OACI,yBAAKyB,UAAU,aACX,yBAAKA,UAAU,aAAaR,GAE5B,yBAAKQ,UAAU,oBACX,yBAAKA,UAAU,cACX,2BAAOA,UAAU,oBAAjB,eAGA,2BACIC,KAAK,MACLF,KAAK,aACLC,UAAU,oBACVE,aAAa,MACbC,SA1DO,SAACN,GACxB,MAAsBA,EAAMC,OAAtBvB,EAAN,EAAMA,MAAOwB,EAAb,EAAaA,KACTL,EAAanB,EACjB6B,QAAQC,IAAI9B,GACZA,EAAQA,EAAM+B,QAAQ,MAAO,IAEzB,kBAAkBC,KAAKhC,IAMlB,+BAA+BgC,KAAKhC,GALzCmB,EAAanB,EACR+B,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UAU3B,aAAaC,KAAKhC,KAEvBmB,EAAanB,EACR+B,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UAC3BA,QAAQ,0BAA2B,cAG5CX,EAAcD,EAAWc,aAEzBvB,EAAcc,EAAML,IA8BJe,UAAU,KACVC,IAAKxB,EACLyB,QAAS,SAACC,GAAD,OAAOvB,EAAiBuB,EAAG,eACpCC,OAAQvB,EACRf,MAAOmB,KAIf,yBAAKM,UAAU,cACX,2BAAOA,UAAU,oBAAjB,eAGA,2BACIC,KAAK,OACLD,UAAU,oBACVE,aAAa,MACbH,KAAK,aACLI,SAAUP,EACVc,IAAKvB,EACLwB,QAAS,SAACC,GAAD,OAAOvB,EAAiBuB,EAAG,eACpCC,OAAQvB,KAIhB,yBAAKU,UAAU,iBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,oBACX,2BAEIA,UAAU,oBAFd,mBAMA,4BACIA,UAAU,4BACVzB,MAAOQ,EACPgB,KAAK,YACLI,SAAUP,EACVc,IAAKtB,EACLuB,QAAS,SAACC,GAAD,OAAOvB,EAAiBuB,EAAG,aACpCC,OAAQvB,GAER,4BAAQf,MAAM,GAAGuC,UAAQ,GAAzB,SAIC3C,EAAU4C,KAAI,SAACC,EAAKxC,GAAN,OACX,4BAAQyC,IAAKzC,EAAOD,MAAOyC,GACtBA,OAIb,4BACIjB,KAAK,WACLC,UAAU,4BACVzB,MAAOS,EACPmB,SAAUP,EACVe,QAAS,SAACC,GAAD,OAAOvB,EAAiBuB,EAAG,aACpCC,OAAQvB,GAER,4BAAQf,MAAM,GAAGuC,UAAQ,GAAzB,QAICjC,EAASkC,KAAI,SAACC,EAAKxC,GAAN,OACV,4BAAQyC,IAAKzC,EAAOD,MAAOyC,GACtBA,SAMrB,yBAAKhB,UAAU,sBACX,yBAAKA,UAAU,cACX,2BAEIA,UAAU,oBAFd,OAMA,2BACIC,KAAK,MACLD,UAAU,oBACVS,UAAU,IACVP,aAAa,MACbH,KAAK,UACLI,SAAUP,EACVe,QA/GT,SAACd,GAChBZ,EAAc,iBAAiB,IA+GP4B,OA5GV,SAAChB,GACfZ,EAAc,iBAAiB,IA4GPyB,IAAKnB,OAKrB,yBAAKS,UAAU,cACX,4BAAQA,UAAU,qBAAlB,a,4BCtLdkB,G,MAAQ,CACVC,KAAM,KACNC,KAAM,WACNC,WAAY,UACZC,SAAU,QACVC,SAAU,MACVC,KAAM,QACNC,OAAQ,kBAQNC,EALqB,WACvB,IAAIC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKD,SAAgB,GAC7C,MAAM,GAAN,OAAUA,EAAV,SAGmBG,GA0PRC,EAxPF,SAAC,GAYP,IAXHC,EAWE,EAXFA,WACAtC,EAUE,EAVFA,WACAX,EASE,EATFA,UACAC,EAQE,EARFA,SACAO,EAOE,EAPFA,QACA0C,EAME,EANFA,cACAC,EAKE,EALFA,kBACAC,EAIE,EAJFA,mBACAjD,EAGE,EAHFA,cACAC,EAEE,EAFFA,cACAC,EACE,EADFA,YAEA,EAA0BK,mBAAS,MAAnC,mBAAO2C,EAAP,KAAcC,EAAd,KAeMC,EAAcC,mBAAQ,WACxB,OAda,SAAC7C,GAGd,IAFA,IACI8C,EADEC,EAAS/C,EAEf,MAA8BgD,OAAOC,QAAQzB,GAA7C,eAAqD,CAAhD,0BAAO0B,EAAP,KAAaC,EAAb,KAED,GADAL,EAAK,IAAIM,OAAOD,GACQ,MAApBJ,EAAOM,MAAMP,GACb,OAAOI,EAIf,MAAO,OAIAI,CAAStD,KACjB,CAACA,IAYJuD,qBAAU,WACN,GAAIf,EAAmB,CACnB,IAAME,GAZec,EAYahB,EAAkBiB,SAVlD,CACIC,MAAM,GAAD,OAAKF,EAAQG,YAAb,MACLC,OAAO,GAAD,OAAKJ,EAAQK,aAAb,MACNC,UAAU,cAAD,OAAgBN,EAAQO,WAAxB,0BAAoDP,EAAQQ,UAA5D,QAEb,KAMFrB,EAASD,GAbW,IAACc,IAe1B,CAAChB,IAeJ,OACI,yBAAKlC,UAAW,cAAgBiC,EAAgB,UAAY,KACxD,yBAAKjC,UAAU,0BACX,yBACIA,UAAS,2BACLkC,EAAiB,cAErBE,MAAOA,IAEX,yBAAKpC,UAAU,oBACX,yBACI2D,IAAI,GACJC,IAAG,2BAAsBlC,GACzB1B,UAAU,mBAIlB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,kBACX,yBACI4D,IAAK,YACL5D,UAAU,oBAEd,yBAAKA,UAAU,mBACX,yBACI2D,IAAKrB,EACLsB,IAAG,qBAAgBtB,EAAhB,QACHtC,UAAU,yBAKtB,2BACIA,UAAU,oBACVU,IAAKxB,EACL2E,QAAS,kBAAM1B,EAAmB,gBAElC,kBAAC2B,EAAA,EAAD,CACI9D,UAAU,gBACV+D,UAAU,OAETrE,EAtDF,SAACA,GACpB,IAAIsE,EAAgBtE,EAAWuE,MAAM,IASrC,OARAD,EAAcE,SAAQ,SAAClD,EAAKxC,OAQrBwF,EA6CiBG,CAAezE,GAAYqB,KAAI,SAACC,EAAKxC,GAAN,OAC3B,kBAAC4F,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTrD,IAAKzC,GAEL,yBAAKwB,UAAU,yBACVgB,OAKb,kBAACoD,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,yBAAKtE,UAAU,yBAAf,QAOhB,yBAAKA,UAAU,sBACX,2BACIA,UAAU,kBACV6D,QAAS,kBAAM1B,EAAmB,eAClCzB,IAAKvB,GAEL,yBAAKa,UAAU,qBAAf,eACA,yBAAKA,UAAU,mBACX,kBAAC8D,EAAA,EAAD,CACIC,UAAU,MACV/D,UAAU,iBAEM,cAAfgC,EACG,kBAACoC,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,2CAGJtC,EACKiC,MAAM,IACNlD,KAAI,SAACC,EAAKxC,GAAN,OACD,kBAAC4F,EAAA,EAAD,CACIE,QAAS,IACTD,WAAW,mBACXpD,IAAKzC,GAEL,0BAAMwB,UAAU,uBACXgB,UAQjC,yBACIhB,UAAU,kBACV6D,QAAS,kBAAM1B,EAAmB,aAClCzB,IAAKtB,GAEL,2BAAOY,UAAU,wBAAjB,WAGA,2BAAOA,UAAU,uBACb,kBAACuE,EAAA,EAAD,CAAkBC,UAAA,GACd,kBAACJ,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTrD,IAAKlC,GAEL,8BACMA,GAAY,KAAkB,QAhBpD,IAsBI,2BACI0F,QAAQ,WACRzE,UAAU,uBAEV,kBAACuE,EAAA,EAAD,CAAkBG,UAAA,GACd,kBAACN,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTrD,IAAKjC,GAEL,8BACMA,EAEIA,EACK2F,WACAC,QAAQ,GAHb,aAatC,yBAAK5E,UAAU,yBACX,yBAAKA,UAAU,oBACX,yBACI2D,IAAI,GACJC,IAAG,2BAAsBlC,GACzB1B,UAAU,mBAGlB,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBAAf,OACA,yBAAKA,UAAU,sBACX,kBAAC8D,EAAA,EAAD,KACKvE,EAAQ0E,MAAM,IAAIlD,KAAI,SAACC,EAAKxC,GAAN,OACnB,kBAAC4F,EAAA,EAAD,CACIC,WAAW,cACXpD,IAAKzC,EACL8F,QAAS,KAET,8BAAOtD,SAKvB,yBAAKhB,UAAU,mBACX,yBACI2D,IAAI,YACJC,IAAK,sBACL5D,UAAU,4BCpQhC6E,EAAe,CACjBnF,WAAY,sBACZsC,WAAY,YACZjD,UAAW,GACXC,SAAU,GACVO,QAAS,GACT0C,eAAe,GA6EJ6C,EA1EI,WACf,MAA0BrF,mBAASoF,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAkDvF,mBAAS,MAA3D,mBAAOyC,EAAP,KAA0B+C,EAA1B,KAEMC,EAAoBC,uBACtB,SAACC,EAAS7G,GACNyG,EAAS,2BACFD,GADC,kBAEHK,EAAU7G,GAASsG,EAAaO,QAGzC,CAACL,IAIDM,EAAmB,CACnB3F,WAAY4F,mBACZtD,WAAYsD,mBACZC,SAAUD,mBACV/F,QAAS+F,oBAGTE,EAAsBL,uBAAY,SAAClE,GACnCoE,EAAiBpE,GAAKkC,QAAQsC,WAG9BC,EAAkB,CAClBhG,WAAY4F,mBACZtD,WAAYsD,mBACZC,SAAUD,oBAQVhG,EAAkB6F,uBAAY,WAC9BF,EAAqB,QACtB,IAEH,OACI,yBAAKjF,UAAU,WACX,kBAAClB,EAAD,CACIC,UAAWgG,EAAMhG,UACjBC,SAAU+F,EAAM/F,SAEhBC,cAAeiG,EAEfhG,cAAemG,EAAiB3F,WAChCP,cAAekG,EAAiBrD,WAChC5C,YAAaiG,EAAiBE,SAE9BlG,iBArBe,SAACsG,EAAQC,GAEhCX,EADkBS,EAAgBE,KAqB1BtG,gBAAiBA,GAEjB,kBAAC,EAAD,CACII,WAAYqF,EAAMrF,WAClBsC,WAAY+C,EAAM/C,WAClBjD,UAAWgG,EAAMhG,UACjBC,SAAU+F,EAAM/F,SAChBO,QAASwF,EAAMxF,QACf0C,cAAe8C,EAAM9C,cACrBC,kBAAmBA,EACnBC,mBAAoBqD,EACpBtG,cAAewG,EAAgBhG,WAC/BP,cAAeuG,EAAgB1D,WAC/B5C,YAAasG,EAAgBH,cCxElCM,MAJf,WACI,OAAO,kBAAC,EAAD,OCDXC,IAASC,OAED,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ac7e43d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\n\nconst monthsArr = Array.from({ length: 12 }, (value, index) => {\n    const month = index + 1;\n    return month <= 9 ? ('0' + month) : (month);\n});\n\nconst currentyear = new Date().getFullYear();\n\nconst yearsArr = Array.from(\n    { length: 9 }, (value, index) => currentyear + index);\n\n\nexport default function CForm({\n    cardMonth,\n    cardYear,\n    onUpdateState,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef,\n    onCardInputFocus,\n    onCardInputBlur,\n    cardCvv,\n    children\n}) {\n    const [cardNumber, setCardNumber] = useState('');\n\n    const handleFormChange = (event) => {\n        const { name, value } = event.target;\n\n        onUpdateState(name, value);\n    };\n\n    \n    const onCardNumberChange = (event) => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        console.log(value)\n        value = value.replace(/\\D/g, '');\n       \n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        }\n        \n        else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            \n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        }\n        \n        else if (/^\\d{0,16}$/.test(value)) {\n            \n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        setCardNumber(cardNumber.trimRight());\n        \n        onUpdateState(name, cardNumber);\n    \n    };\n\n\n    \n    const onCvvFocus = (event) => {\n        onUpdateState('isCardFlipped', true);\n    };\n\n    const onCvvBlur = (event) => {\n        onUpdateState('isCardFlipped', false);\n    };\n\n\n    return (\n        <div className=\"card-form\">\n            <div className=\"card-list\">{children}</div>\n            \n            <div className=\"card-form-inside\">\n                <div className=\"card-input\">\n                    <label className=\"card-input-label\">\n                        Card Number\n                    </label>\n                    <input\n                        type=\"tel\"\n                        name=\"cardNumber\"\n                        className=\"card-input__input\"\n                        autoComplete=\"off\"\n                        onChange={onCardNumberChange}\n                        maxLength=\"19\"\n                        ref={cardNumberRef}\n                        onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\n                        onBlur={onCardInputBlur}\n                        value={cardNumber}\n                    />\n                </div>\n\n                <div className=\"card-input\">\n                    <label className=\"card-input-label\">\n                        Card Holder\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"card-input__input\"\n                        autoComplete=\"off\"\n                        name=\"cardHolder\"\n                        onChange={handleFormChange}\n                        ref={cardHolderRef}\n                        onFocus={(e) => onCardInputFocus(e, 'cardHolder')}\n                        onBlur={onCardInputBlur}\n                    />\n                </div>\n\n                <div className=\"card-form-row\">\n                    <div className=\"card-form-col\">\n                        <div className=\"card-form__group\">\n                            <label\n                               \n                                className=\"card-input-label\"\n                            >\n                                Expiration Date\n                            </label>\n                            <select\n                                className=\"card-input__input -select\"\n                                value={cardMonth}\n                                name=\"cardMonth\"\n                                onChange={handleFormChange}\n                                ref={cardDateRef}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Month\n                                </option>\n\n                                {monthsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                            <select\n                                name=\"cardYear\"\n                                className=\"card-input__input -select\"\n                                value={cardYear}\n                                onChange={handleFormChange}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Year\n                                </option>\n\n                                {yearsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"card-form-col -cvv\">\n                        <div className=\"card-input\">\n                            <label\n                              \n                                className=\"card-input-label\"\n                            >\n                                CVV\n                            </label>\n                            <input\n                                type=\"tel\"\n                                className=\"card-input__input\"\n                                maxLength=\"4\"\n                                autoComplete=\"off\"\n                                name=\"cardCvv\"\n                                onChange={handleFormChange}\n                                onFocus={onCvvFocus}\n                                onBlur={onCvvBlur}\n                                ref={cardCvv}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card-input\">\n                    <button className=\"card-input__input\">Submit</button>\n                </div>\n\n\n\n\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792',\n    diners: '^(30[0-5]|36)'\n};\n\nconst cardBackgroundName = () => {\n    let random = Math.floor(Math.random() * 25 + 1);\n    return `${random}.jpeg`;\n};\n\nconst BACKGROUND_IMG = cardBackgroundName();\n\nconst Card = ({\n    cardHolder,\n    cardNumber,\n    cardMonth,\n    cardYear,\n    cardCvv,\n    isCardFlipped,\n    currentFocusedElm,\n    onCardElementClick,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef\n}) => {\n    const [style, setStyle] = useState(null);\n\n    const cardType = (cardNumber) => {\n        const number = cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa';\n    };\n\n    const useCardType = useMemo(() => {\n        return cardType(cardNumber);\n    }, [cardNumber]);\n\n    const outlineElementStyle = (element) => {\n        return element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n    };\n\n    useEffect(() => {\n        if (currentFocusedElm) {\n            const style = outlineElementStyle(currentFocusedElm.current);\n            setStyle(style);\n        }\n    }, [currentFocusedElm]);\n\n    const maskCardNumber = (cardNumber) => {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                // if (cardNumberArr[index] !== ' ') {\n                //     cardNumberArr[index] = '*';\n                // }\n            }\n        });\n\n        return cardNumberArr;\n    };\n\n    return (\n        <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n            <div className=\"card-item__side -front\">\n                <div\n                    className={`card-item__focus ${\n                        currentFocusedElm ? `-active` : ``\n                    }`}\n                    style={style}\n                />\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n\n                <div className=\"card-item__wrapper\">\n                    <div className=\"card-item__top\">\n                        <img\n                            src={'/chip.png'}\n                            className=\"card-item__chip\"\n                        />\n                        <div className=\"card-item__type\">\n                            <img\n                                alt={useCardType}\n                                src={`/card-type/${useCardType}.png`}\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n\n                    <label\n                        className=\"card-item__number\"\n                        ref={cardNumberRef}\n                        onClick={() => onCardElementClick('cardNumber')}\n                    >\n                        <TransitionGroup\n                            className=\"slide-fade-up\"\n                            component=\"div\"\n                        >\n                            {cardNumber ? (\n                                maskCardNumber(cardNumber).map((val, index) => (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={index}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            {val}\n                                        </div>\n                                    </CSSTransition>\n                                ))\n                            ) : (\n                                <CSSTransition\n                                    classNames=\"slide-fade-up\"\n                                    timeout={250}\n                                >\n                                    <div className=\"card-item__numberItem\">\n                                        #\n                                    </div>\n                                </CSSTransition>\n                            )}\n                        </TransitionGroup>\n                    </label>\n                    <div className=\"card-item__content\">\n                        <label\n                            className=\"card-item__info\"\n                            onClick={() => onCardElementClick('cardHolder')}\n                            ref={cardHolderRef}\n                        >\n                            <div className=\"card-item__holder\">Card Holder</div>\n                            <div className=\"card-item__name\">\n                                <TransitionGroup\n                                    component=\"div\"\n                                    className=\"slide-fade-up\"\n                                >\n                                    {cardHolder === 'FULL NAME' ? (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                        >\n                                            <div>FULL NAME</div>\n                                        </CSSTransition>\n                                    ) : (\n                                        cardHolder\n                                            .split('')\n                                            .map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                    )}\n                                </TransitionGroup>\n                            </div>\n                        </label>\n                        <div\n                            className=\"card-item__date\"\n                            onClick={() => onCardElementClick('cardDate')}\n                            ref={cardDateRef}\n                        >\n                            <label className=\"card-item__dateTitle\">\n                                Expires\n                            </label>\n                            <label className=\"card-item__dateItem\">\n                                <SwitchTransition in-out>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={200}\n                                        key={cardMonth}\n                                    >\n                                        <span>\n                                            {!cardMonth ? 'MM' : cardMonth}{' '}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                            /\n                            <label\n                                htmlFor=\"cardYear\"\n                                className=\"card-item__dateItem\"\n                            >\n                                <SwitchTransition out-in>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={cardYear}\n                                    >\n                                        <span>\n                                            {!cardYear\n                                                ? 'YY'\n                                                : cardYear\n                                                      .toString()\n                                                      .substr(-2)}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"card-item__side -back\">\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n                <div className=\"card-item__band\" />\n                <div className=\"card-item__cvv\">\n                    <div className=\"card-item__cvvTitle\">CVV</div>\n                    <div className=\"card-item__cvvBand\">\n                        <TransitionGroup>\n                            {cardCvv.split('').map((val, index) => (\n                                <CSSTransition\n                                    classNames=\"zoom-in-out\"\n                                    key={index}\n                                    timeout={250}\n                                >\n                                    <span>{val}</span>\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </div>\n                    <div className=\"card-item__type\">\n                        <img\n                            alt=\"card-type\"\n                            src={'/card-type/visa.png'}\n                            className=\"card-item__typeImg\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState, useRef, useCallback } from 'react';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst initialState = {\n    cardNumber: '#### #### #### ####',\n    cardHolder: 'FULL NAME',\n    cardMonth: '',\n    cardYear: '',\n    cardCvv: '',\n    isCardFlipped: false\n};\n\nconst MainScreen = () => {\n    const [state, setState] = useState(initialState);\n    const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\n\n    const updateStateValues = useCallback(\n        (keyName, value) => {\n            setState({\n                ...state,\n                [keyName]: value || initialState[keyName]\n            });\n        },\n        [state]\n    );\n\n    // References for the Form Inputs used to focus corresponding inputs.\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let focusFormFieldByKey = useCallback((key) => {\n        formFieldsRefObj[key].current.focus();\n    });\n\n    let cardElementsRef = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef()\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        const refByName = cardElementsRef[inputName];\n        setCurrentFocusedElm(refByName);\n    };\n\n    let onCardInputBlur = useCallback(() => {\n        setCurrentFocusedElm(null);\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            <CForm\n                cardMonth={state.cardMonth}\n                cardYear={state.cardYear}\n\n                onUpdateState={updateStateValues}\n                \n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                \n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}\n            >\n                <Card\n                    cardNumber={state.cardNumber}\n                    cardHolder={state.cardHolder}\n                    cardMonth={state.cardMonth}\n                    cardYear={state.cardYear}\n                    cardCvv={state.cardCvv}\n                    isCardFlipped={state.isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={focusFormFieldByKey}\n                    cardNumberRef={cardElementsRef.cardNumber}\n                    cardHolderRef={cardElementsRef.cardHolder}\n                    cardDateRef={cardElementsRef.cardDate}\n                ></Card>\n            </CForm>\n        </div>\n    );\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\nimport MainScreen from './screens/MainScreen';\n\nfunction App() {\n    return <MainScreen />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render\n    (\n        <App />,\n        document.getElementById('root')\n    );\n"],"sourceRoot":""}